@page "/user/registration"
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject Sotsera.Blazor.Toaster.IToaster Toaster
@inject IAuthService AuthService


<div class="row">
    <div class="col-12 align-self-center">
        <div class="m-3 m-lg-5">

            <div class="card">
                <div class="card-body">
                    <div class="text-center mt-4">
                        <h1 class="h3">Please sign up</h1>
                    </div>

                    <EditForm Model="@user" OnValidSubmit="RegUser">
                    <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label class="form-label">Name</label>
                            <InputText id="username" class="form-control" placeholder="Username" @bind-Value="user.UserName" />
                            <ValidationMessage For="@(() => user.UserName)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <InputText id="email" class="form-control" placeholder="Email" @bind-Value="user.Email" />
                            <ValidationMessage For="@(() => user.Email)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Password</label>
                            <InputText id="Password" class="form-control" type="password" placeholder="Password" @bind-Value="user.Password" />
                            <ValidationMessage For="@(() => user.Password)" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Confirm password</label>
                            <InputText id="ConfirmPassword" class="form-control" type="password" placeholder="Confirm Password" @bind-Value="user.ConfirmPassword" />
                            <ValidationMessage For="@(() => user.ConfirmPassword)" />
                        </div>
                        <div class="mb-3">
                            <div class="custom-file">
                                <InputFile id="customFile" class="custom-file-input" accept="image/*" OnChange="HandleSelection" />
                                <label class="custom-file-label" for="customFile">Choose image</label>
                            </div>
                        </div>
                        <div class="text-center mt-4">
                            <button type="submit" class="btn btn-block btn-success">Sign up</button>
                        </div>

                        <div class="text-center text-muted mt-2">
                            Already have an account? <a href="user/Login">Sign in</a>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    string status;
    string imageDataUri;
    byte[] base64image;

    UserRegistrationRequest user = new UserRegistrationRequest();
    List<string> err = new List<string>();

    async Task RegUser()
    {
        user.Image = base64image;
        var result = await AuthService.Register(user);
        if (result.Success)
        {
            Toaster.Success("You succesfuly created account!");
            UriHelper.NavigateTo("/profile");
        }
        else
        {
            foreach (var er in result.Errors)
            {
                Toaster.Error(er);
            }
        }
    }

    async Task HandleSelection(InputFileChangeEventArgs e)
    {
        //var rawFile = files.FirstOrDefault();
        //if (rawFile != null)
        //{
            // Load as an image file in memory
            var format = "image/jpeg";
            var imageFile = await e.File.RequestImageFileAsync(format, 640, 480);
            var ms = new MemoryStream();
            await e.File.OpenReadStream().CopyToAsync(ms);

            // Make a data URL so we can display it
            base64image = ms.ToArray();
            imageDataUri = $"data:{format};base64,{Convert.ToBase64String(base64image)}";

            status = $"Finished loading {ms.Length} bytes from {imageFile.Name}";
        //}
    }
}
