@page "/profile"

@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService Storage
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject Sotsera.Blazor.Toaster.IToaster Toaster
@inject AuthenticationStateProvider AuthenticationStateProvider


@attribute [Microsoft.AspNetCore.Authorization.Authorize]


@if (user == null)
{
    <Loader />
}
else
{

    <div class="bootstrap snippet">
        <div class="row">
            <div class="col-sm-10"><h1>@user.UserName</h1></div>
            <div class="col-sm-2">
            </div>
        </div>
        <div class="row">
            <div class="col-sm-3">
                <!--left col-->


                <div>
                    <div class="text-center">
                        @if (user.ImageLink == null || user.ImageLink == String.Empty)
                        {
                            <img class="rounded_medium" src="/img/user_placeholder.png" alt="Avatar">
                        }
                        else
                        {
                            <img class="rounded_medium" src="@user.ImageLink" alt="Avatar">
                        }
                        <h6>Upload a different photo...</h6>
                    </div>
                    <div class="custom-file">
                        <InputFile id="customFile" class="custom-file-input" accept="image/*" OnChange="HandleSelection" />
                        <label class="custom-file-label" for="customFile">Choose image</label>
                    </div>
                </div>
                <hr>
                <br>

                <div class="card">
                    <div class="card-header"><b>Email</b></div>
                    <div class="card-body">@user.Email</div>
                </div>

                <div class="card">
                    <div class="card-header"><b>Activity</b></div>
                    <ul class="list-group">
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            Posts
                            <span class="badge badge-primary badge-pill">@user.myPosts.Count()</span>
                        </li>
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            Subscriptions
                            <span class="badge badge-primary badge-pill">@user.Subscription.Count()</span>
                        </li>
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            Votes
                            <span class="badge badge-primary badge-pill">@user.Votes.Count()</span>
                        </li>
                    </ul>
                </div>

            </div><!--/col-3-->
            <div class="col-sm-9">
                <div class="card">
                    <div class="card-body">
                        <TabControl>
                            <TabPage Text="Calendar">
                                <hr />
                                <FullCalendar settings="@calendarSettings" />
                            </TabPage>
                            <TabPage Text="Profile">
                                <hr />
                                <h2>Change name</h2>
                                <hr>
                                <EditForm Model="updateAccount" class="form" OnValidSubmit="OnUpdateAccount">
                                    <DataAnnotationsValidator/>
                                    <div class="form-group">

                                        <div class="col-xs-6">
                                            <label for="first_name"><h4>Email</h4></label>
                                            <input @bind-value="@updateAccount.Email" type="text" class="form-control" name="first_name" id="first_name" placeholder="@user.Email" title="enter your first name if any.">
                                            <ValidationMessage For="@(() => updateAccount.Email)" />
                                        </div>
                                    </div>
                                    <div class="form-group">

                                        <div class="col-xs-6">
                                            <label for="last_name"><h4>User name</h4></label>
                                            <input @bind-value="updateAccount.UserName" type="text" class="form-control" name="last_name" id="last_name" placeholder="@user.UserName" title="enter your last name if any.">
                                            <ValidationMessage For="@(() => updateAccount.UserName)" />
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        <div class="col-xs-12">
                                            <br>
                                            <button class="btn btn-success" type="submit">Save</button>
                                        </div>
                                    </div>
                                </EditForm>
                                <hr />
                                <h2>Change password</h2>
                                <hr />
                                <EditForm Model="updatePassword" class="form" OnValidSubmit="OnUpdatePassword">
                                    <DataAnnotationsValidator />
                                    <div class="form-group">

                                        <div class="col-xs-6">
                                            <label for="password"><h4>Current password</h4></label>
                                            <input @bind-value="@updatePassword.currentPassword" type="password" class="form-control" name="password" id="password" placeholder="password" title="enter your password.">
                                            <ValidationMessage For="@(() => updatePassword.currentPassword)" />
                                        </div>
                                    </div>
                                    <div class="form-group">

                                        <div class="col-xs-6">
                                            <label for="password2"><h4>New password</h4></label>
                                            <input @bind-value="@updatePassword.newPassword" type="password" class="form-control" name="password2" id="password2" placeholder="password" title="enter your password2.">
                                            <ValidationMessage For="@(() => updatePassword.newPassword)" />
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        <div class="col-xs-12">
                                            <br>
                                            <button class="btn btn-success" type="submit">Save</button>
                                        </div>
                                    </div>

                                </EditForm>

                            </TabPage>
                            <TabPage Text="Posts">
                                <div class="table-responsive">
                                    <table class="table table-striped">
                                        <thead>
                                            <tr>
                                                <th scope="col">Name</th>
                                                <th scope="col">Coments</th>
                                                <th scope="col">Votes</th>
                                                <th scope="col">Action</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var post in user.myPosts)
                                            {
                                                <tr>
                                                    <th><a href="post/@post.Id" class="nav-link">@post.Name</a></th>
                                                    <th>@post.ComentsAmount</th>
                                                    <th>@post.VotesAmount</th>
                                                    <th><button class="btn btn-danger" @onclick="@(async () => await DeletePostAsync(post.Id))">Delete</button></th>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </TabPage>
                            <TabPage Text="Subscriptions">
                                <div class="table-responsive">
                                    <table class="table table-striped">
                                        <thead>
                                            <tr>
                                                <th scope="col">Name</th>
                                                <th scope="col">Action</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var thread in user.Subscription)
                                            {
                                                <tr>
                                                    <th><a href="thread/@thread.Id/list/1" class="nav-link">@thread.Name</a></th>
                                                    <th><button class="btn btn-danger" @onclick="@(async () => await DeleteSubscriptionAsync(thread.Id))">Unsibscribe</button></th>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </TabPage>
                            <TabPage Text="Votes">
                                <div class="table-responsive">
                                    <table class="table table-striped">
                                        <thead>
                                            <tr>
                                                <th scope="col">Name</th>
                                                <th scope="col">Action</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var post in user.Votes)
                                            {
                                                <tr>
                                                    <th><a href="post/@post.Id" class="nav-link">@post.Name</a></th>
                                                    <th><button class="btn btn-danger" @onclick="@(async () => await DownvotePostAsync(post.Id))">Downvote</button></th>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </TabPage>
                        </TabControl>

                    </div>
                </div>

            </div><!--/col-9-->
        </div><!--/row-->
    </div>
}

@code {
    string userId { get; set; }
    UserResponse user { get; set; }
    string imageUri { get; set; }

    public CalendarSettings calendarSettings { get; set; }

    UpdatePasswordRequest updatePassword { get; set; } = new UpdatePasswordRequest();
    UpdateAccountRequest updateAccount { get; set; } = new UpdateAccountRequest();

    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            var _authMessage = $"{user.Identity.Name} is authenticated.";
            var _claims = user.Claims;
            userId = user.FindFirst(c => c.Type == "id")?.Value;

            await LoadUserInfo(userId);
        }
        else
        {
            //_authMessage = "The user is NOT authenticated.";
        }
    }
    protected void InitCalendar()
    {
        calendarSettings = new CalendarSettings()
        {
            plugins = new[] { CalendarPluginTypes.DayGrid, CalendarPluginTypes.Interaction, CalendarPluginTypes.Bootstrap},
            defaultView = "dayGridOneMonths",
            timeZone = "UTC",
            header = new CalendarHeader()
            {
                left = "prev,next today ",
                center = "title",
                right = "dayGridOneMonths,dayGridOneWeek,dayListOneDay"
            },
            views = new Dictionary<string, CalendarViewDefinition>()
            {
                { "dayGridOneWeek", CalendarViewDefinition.DayGridWeeks(1,"Week") },
                { "dayGridOneMonths", CalendarViewDefinition.DayGridMonths(1,"Months") }

            },
            events = GetUsersEvents().ToArray()
        };

    }
    public List<CalendarDateItem> GetUsersEvents()
    {
        var eventList = new List<CalendarDateItem>();
        foreach(var ev in user.Calendar)
        {
            eventList.Add(new CalendarDateItem()
            {
                start = ev.DateOfEvent,
                end = ev.DateOfEvent.AddMinutes(1),
                title = ev.Name,
                url = "post/" + ev.Id
            });
        }
        return eventList;

    }
    public static List<CalendarDateItem> GetRandomEvents(int count, int maxHours = 480, int maxEventDuration = 10, bool allday = false, string label = "Event")
    {
        var r = new Random();
        var eventList = new List<CalendarDateItem>();
        for (int i = 0; i < count; i++)
        {
            var randomStart = DateTime.Now.Subtract(new TimeSpan(r.Next(-maxHours, maxHours), r.Next(-60, 60), r.Next(-60, 60)));
            var randomEnd = randomStart.Add(new TimeSpan(r.Next(0, maxEventDuration), r.Next(15, 60), r.Next(0, 60)));
            eventList.Add(new CalendarDateItem()
            {
                start = randomStart,
                end = randomEnd,
                title = $"Some {label} {r.Next(123, 12345)}",
                //backgroundColor = $"rgb({r.Next(256)},{r.Next(256)},{r.Next(256)})",
                allDay = allday,
                url = "post/49dd1460-4b04-4249-a32d-282fcf54ff29"
            });
        }

        return eventList;
    }

    private async Task OnUpdatePassword()
    {
        var responce = await Http.PutAsJsonAsync(ApiRoutes.User.UpdatePassword.Replace("{id}", userId), updatePassword);

        if (responce.IsSuccessStatusCode)
        {
            Toaster.Info(await responce.Content.ReadAsStringAsync());
            updatePassword = new UpdatePasswordRequest();
        }
        else
        {
            Toaster.Warning(await responce.Content.ReadAsStringAsync());
        }
    }

    private async Task OnUpdateAccount()
    {
        var responce = await Http.PutAsJsonAsync(ApiRoutes.User.UpdateAccount.Replace("{id}", userId), updateAccount);

        if (responce.IsSuccessStatusCode)
        {
            var userShort = await responce.Content.ReadFromJsonAsync<UserShortResponse>();
            user.Email = userShort.Email;
            user.UserName = userShort.UserName;
            updateAccount = new UpdateAccountRequest();
            Toaster.Info("You succesfuly updated your account");
        }
        else
        {
            Toaster.Warning(await responce.Content.ReadAsStringAsync());
        }
    }


    protected async Task LoadUserInfo(string id)
    {

        var responce = await Http.GetAsync(ApiRoutes.User.Get.Replace("{id}", id));

        if (responce.IsSuccessStatusCode)
        {
            user = await responce.Content.ReadFromJsonAsync<UserResponse>();
        }
        InitCalendar();
    }

    protected async Task DeletePostAsync(string postId)
    {
        var responce = await Http.DeleteAsync(ApiRoutes.Posts.Delete.Replace("{id}", postId));
        if (responce.IsSuccessStatusCode)
        {
            user.myPosts.RemoveAll(x => x.Id == postId);
            Toaster.Error("Post is deleted!");
        }
    }

    protected async Task DeleteSubscriptionAsync(string threadId)
    {
        var responce = await Http.DeleteAsync(ApiRoutes.Threads.Unsubscribe.Replace("{id}", threadId));
        if (responce.IsSuccessStatusCode)
        {
            user.Subscription.RemoveAll(x => x.Id == threadId);
            Toaster.Error("Thread is deleted!");
        }

    }

    protected async Task DownvotePostAsync(string postId)
    {
        var responce = await Http.DeleteAsync(ApiRoutes.Posts.Unvote.Replace("{id}", postId));
        if (responce.IsSuccessStatusCode)
        {
            user.Votes.RemoveAll(x => x.Id == postId);
            Toaster.Error("Unvoted post");
        }
    }

    async Task HandleSelection(InputFileChangeEventArgs e)
    {
        //var rawFile = files.FirstOrDefault();
        //if (rawFile != null)
        //{
            // Load as an image file in memory
            var format = "image/jpeg";
            var imageFile = await e.File.RequestImageFileAsync(format, 640, 480);
            var ms = new MemoryStream();
            await e.File.OpenReadStream().CopyToAsync(ms);

            UpdateImageRequest changeImageRequest = new UpdateImageRequest();

            changeImageRequest.Image = ms.ToArray();

            var responce = await Http.PutAsJsonAsync(ApiRoutes.User.UpdateImage.Replace("{id}", userId), changeImageRequest);

            if (responce.IsSuccessStatusCode)
            {
                Toaster.Info("You succesfuly changed profile image");
                string link = await responce.Content.ReadAsStringAsync();
                user.ImageLink = link.Trim('"');
            }
            else
            {
                Toaster.Warning(await responce.Content.ReadAsStringAsync());
            }

        //}
    }

}
