@page "/post/{Id}"
@using BlazorLeaflet.Models
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService Storage
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject Sotsera.Blazor.Toaster.IToaster Toaster
@inject IJSRuntime jsRuntime

@if (post == null)
{
    <Loader/>
}
else
{
    <!-- Page Content -->

    <div class="row">

        <!-- Post Content Column -->
        <div class="col-lg-10">

            <div class="d-flex justify-content-between align-items-center px-1">
            <!-- Title -->
            <h1 class="mt-4">@post.Name</h1>
            <AuthorizeView Roles="Admin">
                <button class="btn btn-danger" @onclick="(async () => await OnDeletePost() )">Delete</button>
            </AuthorizeView>
            </div>

            <!-- Author -->
            <p class="lead">
                by
                <a href="#">@post.UserName</a>
            </p>

            <hr>

            <!-- Date/Time -->
            <p>Posted on @post.Date</p>

            <hr>

            @if(post.PostType == PostType.Event)
            {
            <div class="d-flex justify-content-between align-items-center px-1">
            <p>Date of event: @post.DateOfEvent</p>
            <button class="btn btn-primary" @onclick="(async () => await OnAddToCalendar())"><i class="mdi mdi-calendar"></i>Add to calendar</button>
            </div>
            <hr>
            }

            <div class="@(type == ImageType.Map ? "collapse" : "")">
            <!-- Preview Image -->
            @if(post.ImageLink == null || post.ImageLink == String.Empty)
            {
                <img class="img-fluid rounded" src="/img/post_placeholder.gif" width="940" />
            }
            else
            {
                <img class="img-fluid rounded" src="@post.ImageLink" width="940" />
            }
            </div>
            <div class="@(type == ImageType.Photo ? "collapse" : "")">
                <div id="mapContainer" style="max-width: 940px; height: 500px;">
                    <LeafletMap Map="_map" />
                </div>
            </div>
            <hr>
            <ul class="nav nav-pills nav-fill mb-3" role="tablist">
                <li class="nav-item" role="presentation">
                    <a @onclick="@(() => type = ImageType.Photo)" class="nav-link" role="tab" data-toggle="pill" type="button" aria-controls="all" >Photo</a>
                </li>
                <li class="nav-item" role="presentation">
                    <a @onclick="@(() => type = ImageType.Map)" class="nav-link active" role="tab" data-toggle="pill" type="button" aria-controls="event">Map</a>
                </li>
            </ul>

            <!-- Post Content -->
            @((MarkupString)@post.Content)


            <hr>

            @if (post.Tags != null)
            {
                @if (!string.IsNullOrEmpty(post.Tags))
                {
                    <p>
                    @foreach(var tag in post.Tags.Trim().Split(" "))
                    {
                        <text><a href="#">@("#" + tag)</a> </text>
                    }
                    </p>

                    <hr>
                    
                }
            }

            <div class="d-flex justify-content-between align-items-center px-1">
            <div ><i class="mdi mdi-forum"> : @post.Coments.Count()</i></div>
            <div ><button class="btn btn-primary" @onclick="Vote">Vote</button> Votes: @post.Rating</div>
            </div>

            <hr>

            <!-- Comments Form -->
            <div class="card my-4">
                <h5 class="card-header">Leave a Comment:</h5>
                <div class="card-body">
                    <EditForm Model="@coment" OnValidSubmit="CreateNewComent">
                        <DataAnnotationsValidator />

                        <div class="form-group">
                            <InputText id="name" class="form-control" rows="3" placeholder="Write comment...." @bind-Value="coment.Text" />
                            <ValidationMessage For="@(() => coment.Text)" />
                        </div>
                        <button type="submit" class="btn btn-primary">Submit</button>
                    </EditForm>
                </div>
            </div>

            @foreach(var subComent in post.Coments.Where(p => p.ParentComentId == null))
            {
                <Coment coment="@subComent" OnCreateComent="@CreateComentHandler"></Coment>
            }



        </div>
    </div>
}


@code {
    [Parameter]
    public string Id { get; set; }

    enum ImageType
    {
        Photo,
        Map
    };

    ImageType type = ImageType.Map;

    PostResponse post;
    ComentRequest coment = new ComentRequest();

    public Map _map;
    private LatLng _markerLatLng;

    protected override async Task OnInitializedAsync() 
    {
        await loadPost();
        Console.WriteLine(post.Id);
        _markerLatLng = new LatLng(post.Latitude, post.Longitude);

        var marker = new Marker(_markerLatLng)
        {
            Title = "Marker 1",
        };

        Console.WriteLine("JsRuntime - " + (jsRuntime == null ? "null" : "instance"));
        _map = new Map(jsRuntime)
        {
            Center = _markerLatLng,
            Zoom = 16.0f
        };

        _map.OnInitialized += () =>
        {
            _map.AddLayer(new TileLayer
                {
                    UrlTemplate = "https://a.tile.openstreetmap.org/{z}/{x}/{y}.png",
                    Attribution = "&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors",
                });
            _map.AddLayer(marker);
        };
    }

    async Task loadPost()
    {
        var response = await Http.GetAsync(ApiRoutes.Posts.Get.Replace("{id}", Id));
        if (response.IsSuccessStatusCode)
        {
            post = await response.Content.ReadFromJsonAsync<PostResponse>();
        }
    }
    async Task CreateNewComent()
    {
        coment.PostId = Id;
        var response = await Http.PostAsJsonAsync(ApiRoutes.Coments.Create, coment);
        await CheckIfOk(response);
    }
    async Task CreateComentHandler(ComentRequest comentreq)
    {
        comentreq.PostId = Id;
        var response = await Http.PostAsJsonAsync(ApiRoutes.Coments.Create, comentreq);
        await CheckIfOk(response);
    }
    async Task CheckIfOk(HttpResponseMessage response)
    {
        if (response.IsSuccessStatusCode)
        {
            Toaster.Success("You succesfuly comented this post!");
            await loadPost();
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            Toaster.Warning("You have to login to leave a coment");
        }
        else
        {
            Toaster.Error("Something went wrong while commenting this post");
        }

    }
    async Task Vote()
    {
        var responce = await Http.PostAsync(ApiRoutes.Posts.Vote.Replace("{id}", Id), null);

        if (responce.IsSuccessStatusCode)
        {
            Toaster.Success(await responce.Content.ReadAsStringAsync());
            post.Rating += 1;
        }
        else if(responce.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            Toaster.Warning("You have to login to vote");
        }
        else if(responce.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            Toaster.Error(await responce.Content.ReadAsStringAsync());
        }
    }

    private async Task OnDeletePost()
    {
        var responce = await Http.DeleteAsync(ApiRoutes.Posts.Delete.Replace("{id}", Id));

        if (responce.IsSuccessStatusCode)
        {
            Toaster.Warning("You succesfuly deleted post");
            UriHelper.NavigateTo("posts");
        }
        else
        {
            Toaster.Error("Could not delete post");
        }

    }
    private async Task OnAddToCalendar()
    {
        var responce = await Http.PostAsync(ApiRoutes.Posts.CalendarAdd.Replace("{id}", Id), null);

        if (responce.IsSuccessStatusCode)
        {
            Toaster.Success("You succesfuly added event to your calendar");
        }
        else if(responce.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            Toaster.Warning("You have to login to add to calendar");
        }
        else if(responce.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            Toaster.Error(await responce.Content.ReadAsStringAsync());
        }
    }

}
