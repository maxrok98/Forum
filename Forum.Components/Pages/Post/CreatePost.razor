@page "/createpost"
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService Storage
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject Sotsera.Blazor.Toaster.IToaster Toaster
@inject IJSRuntime jsRuntime
@inject ICognitiveService cognitiveService 
@implements IAsyncDisposable
@using BlazorLeaflet.Models
@using BlazorLeaflet.Models.Events

@attribute [Microsoft.AspNetCore.Authorization.Authorize]

<div class="card">
    <div class="card-body">
    <div class="text-center mt-4">
        <h1 class="h3">Create post</h1>
    </div>

    <EditForm Model="@newPost" OnValidSubmit="CreateNewPost">
        <DataAnnotationsValidator />
        <div class="mb-3">
            <label class="form-label"><b>Title</b></label>
            <InputText id="name" class="form-control" placeholder="Name" @bind-Value="newPost.Name" />
            <ValidationMessage For="@(() => newPost.Name)" />
        </div>
        <div class="mb-3">
            <label class="form-label"><b>Content</b></label>
            <InputTextArea id="content" class="form-control" placeholder="Content" @bind-Value="newPost.Content" />
            <ValidationMessage For="@(() => newPost.Content)" />
@*                             <textarea id="summernote"></textarea>
             <button @onclick="butRecordAudioStart_Click" class="btn btn-primary" disabled=@mDisableRecordAudioStart>Start Record</button>
            <button @onclick="butRecordAudioStop_Click" class="btn btn-primary" disabled=@mDisableRecordAudioStop>Stop</button>
            *@
        </div>
        <div class="d-flex justify-content-center">
            <button @onpointerdown="butRecordAudioStart_Click" @onpointerup="butRecordAudioStop_Click"
                type="button" class="btn btn-primary btn-rounded btn-icon">
                <i class="mdi mdi-microphone"></i>
            </button>
        </div>
        <div class="mb-3">
            <label class="form-label"><b>Thread</b></label>
            <InputSelect id="thread" class="form-control" @bind-Value="newPost.ThreadId">
                @foreach (var thread in threads)
                {
                    <option value="@thread.Id">@thread.Name</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => newPost.ThreadId)" />
        </div>
        <div class="mb-3">
            <label class="form-label"><b>Post type</b></label>
            <div style="display: flex; justify-content: space-around;">
            <InputRadioGroup id="postTypesRadio" @bind-Value="newPost.PostType">
                <div class="custom-control custom-radio custom-control-inline">
                    <InputRadio id="radioPost" class="custom-control-input" Value="@PostType.Place"/>
                    <label class="custom-control-label" for="radioPost">Place</label>
                </div>
                <div class="custom-control custom-radio custom-control-inline">
                    <InputRadio id="radioEvent" class="custom-control-input" Value="@PostType.Event"/>
                    <label class="custom-control-label" for="radioEvent">Event</label>
                </div>
            </InputRadioGroup>
            </div>
        </div>
        <div class="mb-3 @(newPost.PostType == PostType.Event ? "" : "collapse")">
            <label class="form-label"><b>Date of event</b></label>
            <InputDateTime id="createdDate" class="form-control" @bind-Value="newPost.DateOfEvent"></InputDateTime>
            <ValidationMessage class="offset-sm-3 col-sm-8" For="(()=>newPost.DateOfEvent)"></ValidationMessage>
        </div>
        <div class="mb-3">
            <div class="custom-file">
                <InputFile id="customFile" class="custom-file-input" accept="image/jpeg" OnChange="HandleSelection" />
                <label class="custom-file-label" for="customFile">Choose image</label>
            </div>
        </div>
        <div class="@(showWarning ? "" : "collapse")">
            <p class="text-danger">Could not load loacation from image. Please set loacation on map!</p>
        </div>
        <!-- You must wrap the map component in a container setting its actual size. -->
        @if (_map != null)
        {
            <div id="mapContainer" class="@(showMap ? "" : "collapse")"  style="width: 100%; height: 300px;">
                <LeafletMap Map="_map" />
            </div>
        }
        <div class="text-center mt-4">
            <button type="submit" class="btn btn-block btn-info">Create</button>
        </div>
    </EditForm>

    </div>
</div>


@code {
    string imageDataUri;
    byte[] base64image;

    bool mDisableRecordAudioStart;
    bool mDisableRecordAudioStop = true;

    PostRequest newPost = new PostRequest();
    List<ThreadResponse> threads = new List<ThreadResponse>();

    private Map _map;
    private LatLng _markerLatLng = new LatLng(48.286392f, 25.938034f);
    private bool showMap { get; set; } = false;
    private bool showWarning { get; set; } = false;


    protected override async Task OnInitializedAsync()
    {
        var responce = await Http.GetAsync(ApiRoutes.Threads.GetAll);
        if (responce.IsSuccessStatusCode)
        {
            threads = await responce.Content.ReadFromJsonAsync<List<ThreadResponse>>();
        }
        else
        {
            Toaster.Error("Could not get thread list");
        }
        await jsRuntime.InvokeVoidAsync("BlazorAudioRecorder.Initialize", DotNetObjectReference.Create(this));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
            await jsRuntime.InvokeVoidAsync("createNote");
    }

    private void InitMap(double? lat, double? lng)
    {

        if (lat != null && lng != null)
            _markerLatLng = new LatLng((float)lat, (float)lng);
        else
            showWarning = true;


        var marker = new Marker(_markerLatLng)
        {
            Draggable = true,
            Title = "Marker 1",
            Tooltip = new Tooltip { Content = "Click and drag to move me" }
        };

        _map = new Map(jsRuntime)
        {
            Center = _markerLatLng,
            Zoom = 16.0f
        };

        _map.OnInitialized += () =>
        {
            _map.AddLayer(new TileLayer
            {
                UrlTemplate = "https://a.tile.openstreetmap.org/{z}/{x}/{y}.png",
                Attribution = "&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors",
            });
            _map.AddLayer(marker);
        };

        marker.OnMove += OnDrag;
        marker.OnMoveEnd += OnDragEnd;

        showMap = true;
    }

    private void OnDrag(Marker marker, DragEvent evt)
    {
        _markerLatLng = evt.LatLng;
        StateHasChanged();
    }

    private async void OnDragEnd(Marker marker, Event e)
    {
        marker.Position = _markerLatLng;
        Console.WriteLine("I am now at {0:0.00}° lat, {1:0.00}° lng", _markerLatLng.Lat, _markerLatLng.Lng);
        await LeafletInterops.UpdatePopupContent(jsRuntime, _map.Id, marker);
    }

    async Task CreateNewPost()
    {
        newPost.Image = base64image;
        newPost.Latitude = _markerLatLng.Lat;
        newPost.Longitude = _markerLatLng.Lng;
        newPost.Content = await jsRuntime.InvokeAsync<string>("getCode");

        var responce = await Http.PostAsJsonAsync(ApiRoutes.Posts.Create, newPost);

        if (responce.IsSuccessStatusCode)
        {
            Toaster.Success("You succesfuly created post!");
            UriHelper.NavigateTo("/userpage");
        }
        else if (responce.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            Toaster.Warning("You have to login to create a post");
        }
        else
        {
            Toaster.Error("Could not create new post!");
        }
    }

    async Task HandleSelection(InputFileChangeEventArgs e)
    {
        //var rawFile = files.FirstOrDefault();
        //if (rawFile != null)
        //{
        // Load as an image file in memory
        var format = "image/jpeg";
        //var imageFile = await rawFile.ToImageFileAsync(format, 640, 480);
        using (var ms = new MemoryStream())
        {
            await e.File.OpenReadStream().CopyToAsync(ms);
            // Make a data URL so we can display it
            base64image = ms.ToArray();

            ms.Seek(0, SeekOrigin.Begin);
            double? lat = null, lng = null;
            try
            {
                using (ExifReader reader = new ExifReader(ms))
                {
                    reader.GetTagValue(ExifTags.GPSLatitude, out double[] latitude);
                    reader.GetTagValue(ExifTags.GPSLongitude, out double[] longitude);
                    if(latitude != null && longitude != null)
                    {
                        lat = latitude[0] + latitude[1] / 60f + latitude[2] / 3600f;
                        lng = longitude[0] + longitude[1] / 60f + longitude[2] / 3600f;

                    }
                }
            }catch(Exception ex) { }
            InitMap(lat, lng);
        }
        imageDataUri = $"data:{format};base64,{Convert.ToBase64String(base64image)}";

        //status = $"Finished loading {ms.Length} bytes from {imageFile.Name}";
        //}
    }

    void butRecordAudioStart_Click()
    {
        mDisableRecordAudioStart = true;
        mDisableRecordAudioStop = false;
        jsRuntime.InvokeVoidAsync("BlazorAudioRecorder.StartRecord");
    }
    async Task butRecordAudioStop_Click()
    {
        mDisableRecordAudioStart = false;
        mDisableRecordAudioStop = true;
        await jsRuntime.InvokeVoidAsync("BlazorAudioRecorder.StopRecord");
    }
    [JSInvokable]
    public async Task OnAudioReady(byte[] bytes, string pAudioUrl)
    {
        //await jsRuntime.InvokeVoidAsync("BlazorAudioRecorder.DownloadBlob", pAudioUrl, "TestSample.wav");
        var result = await cognitiveService.GetSpeechToText(bytes);
        if (!result.Success)
        {
            Toaster.Error(result.Errors.FirstOrDefault());
        }
        newPost.Content = newPost.Content + " " + result.Text;
        StateHasChanged();
    }
    public async ValueTask DisposeAsync()
    {
        await jsRuntime.InvokeVoidAsync("destroyNote");
    }
}
