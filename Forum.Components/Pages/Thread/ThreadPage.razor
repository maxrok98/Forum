@page "/threadpage"
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService Storage
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject Sotsera.Blazor.Toaster.IToaster Toaster
@inject IThreadService ThreadService


@if (threads == null)
{
    <Loader/>
}
else
{

    @foreach (var thread in threads)
    {
        <ThreadShort thread="thread"></ThreadShort>
    }

    <AuthorizeView Roles="Admin">
        <EditForm Context="Auth" Model="@newThread" OnValidSubmit="CreateNewThread">
            <DataAnnotationsValidator />

            <div>
                <h1 class="h3 mb-3 text-center">Create new thread</h1>
                <div class="form-group">
                    <InputText id="name" class="form-control" placeholder="Name" @bind-Value="newThread.Name" />
                    <ValidationMessage For="@(() => newThread.Name)" />
                </div>
                <div class="form-group">
                    <InputText id="username" class="form-control" placeholder="Description" @bind-Value="newThread.Description" />
                    <ValidationMessage For="@(() => newThread.Description)" />
                </div>

                <InputFile OnChange="HandleSelection" />
                <p>@status</p>
                @if (!string.IsNullOrEmpty(imageDataUri))
                {
                    <img src="@imageDataUri" />
                }

                <div class="form-group mt-2">
                    <button type="submit" class="btn btn-lg btn-primary btn-block">Create</button>
                </div>
            </div>
        </EditForm>
    </AuthorizeView>
}


@code {
    List<ThreadResponse> threads = new List<ThreadResponse>();

    ThreadRequest newThread = new ThreadRequest();
    string status;
    string imageDataUri;
    byte[] base64image;

    protected override async Task OnInitializedAsync()
    {
        await loadThreads();
    }

    protected async Task loadThreads()
    {
        threads = await ThreadService.GetAll();
    }

    async Task HandleSelection(InputFileChangeEventArgs e)
    {
        //var rawFile = files.FirstOrDefault();
        //if (rawFile != null)
        //{
            // Load as an image file in memory
            var format = "image/jpeg";
            var imageFile = await e.File.RequestImageFileAsync(format, 640, 480);
            var ms = new MemoryStream();
            await e.File.OpenReadStream().CopyToAsync(ms);

            // Make a data URL so we can display it
            base64image = ms.ToArray();
            imageDataUri = $"data:{format};base64,{Convert.ToBase64String(base64image)}";

            status = $"Finished loading {ms.Length} bytes from {imageFile.Name}";
        //}
    }

    async Task CreateNewThread()
    {
        newThread.Image = base64image;
        var response = await Http.PostAsJsonAsync(ApiRoutes.Threads.Create, newThread);
        if (response.IsSuccessStatusCode)
        {
            Toaster.Info("New thread is created!");
            UriHelper.NavigateTo("/threadpage");
        }
        else
        {
            Toaster.Error("Something went wrong when creating new thread!");
        }
    }
}
