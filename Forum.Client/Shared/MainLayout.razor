@inherits LayoutComponentBase
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject Blazored.LocalStorage.ILocalStorageService Storage 
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http



<div class="container-scroller @(sidebarIconOnly ? "sidebar-icon-only" : "")">
    <nav class="navbar col-lg-12 col-12 p-0 fixed-top d-flex flex-row">
        <div class="navbar-brand-wrapper d-flex justify-content-center">
            <div class="navbar-brand-inner-wrapper d-flex justify-content-between align-items-center w-100">
                <a class="navbar-brand brand-logo"><img src="img/logo.svg" alt="logo" /></a>
                <a class="navbar-brand brand-logo-mini"><img src="img/logo-mini.svg" alt="logo" /></a>
                <button @onclick="@(() => sidebarIconOnly = !sidebarIconOnly)" class="navbar-toggler navbar-toggler align-self-center" type="button" data-toggle="minimize">
                    <span class="mdi mdi-sort-variant"></span>
                </button>
            </div>
        </div>
        <div class="navbar-menu-wrapper d-flex align-items-center justify-content-end">
            <ul class="navbar-nav mr-lg-4 w-100">
                <li class="nav-item nav-search d-none d-lg-block w-100">
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text" id="search">
                                <i class="mdi mdi-magnify"></i>
                            </span>
                        </div>
                        @*<input type="text" class="form-control" placeholder="Search now" aria-label="search" aria-describedby="search">*@
                        <input type="text" class="form-control" placeholder="Search for..." @bind="this.SearchTerm" @onkeyup="SearchBoxKeyPress">
                    </div>
                </li>
            </ul>
            <ul class="navbar-nav navbar-nav-right">
                <li class="nav-item nav-profile dropdown">
                    <AuthorizeView>
                        <Authorized>
                            <a class="nav-link dropdown-toggle" href="#" data-toggle="dropdown" id="profileDropdown">
                                @if (!string.IsNullOrEmpty(user.ImageLink))
                                {
                                <img class="rounded_small" src="@user.ImageLink" alt="profile" />
                                }
                                else
                                {
                                <img class="rounded_small" src="/img/user_placeholder.png" alt="profile"/>
                                }
                                <span class="nav-profile-name">@user.UserName</span>
                            </a>
                            <div class="dropdown-menu dropdown-menu-right navbar-dropdown" aria-labelledby="profileDropdown">
                                <a class="dropdown-item" href="profile">
                                    <i class="mdi mdi-account-circle text-primary"></i>
                                    Profile 
                                </a>
                                <a class="dropdown-item" href="user/logout">
                                    <i class="mdi mdi-logout text-primary"></i>
                                    Logout
                                </a>
                            </div>
                        </Authorized>
                        <NotAuthorized>
                                <NavLink class="dropdown-item" href="user/login">
                                    <i class="mdi mdi-login"></i>
                                    Login 
                                </NavLink>
                        </NotAuthorized>
                    </AuthorizeView>
                </li>
            </ul>
            <button @onclick="@(() => activeSidebar = !activeSidebar)" class="navbar-toggler navbar-toggler-right d-lg-none align-self-center" type="button" data-toggle="offcanvas">
                <span class="mdi mdi-menu"></span>
            </button>
        </div>
    </nav>


    <div class="container-fluid page-body-wrapper">
        <NavMenu activeSidebar="@activeSidebar"/>


        <div class="main-panel">
            <div class="content-wrapper">
                @Body
            </div>
    
        </div>
    </div>
</div>

@code{
    bool activeSidebar { get; set; } = false;
    bool sidebarIconOnly { get; set; } = false;
    string SearchTerm { get; set; }

    //System.Security.Claims.ClaimsPrincipal user;

    UserShortResponse user { get; set; } = new UserShortResponse();

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        if (state.User.Identity.IsAuthenticated)
        {
            var id = state.User.FindFirst(c => c.Type == "id")?.Value;
            await LoadUserInfo(id);

        }

    }

    protected async Task LoadUserInfo(string id)
    {

        var responce = await Http.GetAsync(ApiRoutes.User.GetShort.Replace("{id}", id));
        if (responce.IsSuccessStatusCode)
        {
            user = await responce.Content.ReadFromJsonAsync<UserShortResponse>();
        }
    }

    protected async Task SearchBoxKeyPress(KeyboardEventArgs ev)
    {
        if (ev.Key == "Enter" && !string.IsNullOrEmpty(SearchTerm))
        {
            await Task.Run(() =>
            {
                UriHelper.NavigateTo($"/posts/{SearchTerm}");
            });
        }
    }
}

