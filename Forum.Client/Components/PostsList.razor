@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService Storage
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject IPostService PostService


<div class="container">

    @if (posts == null)
    {
        <Loader/>
    }
    else
    {
        <div class="row">

            <!-- Blog Entries Column -->
            <div class="col-md-8">
                @foreach (var post in posts.Results)
                {

                    <!-- Blog Post --> 
                    <PostShort post="post"/>
                }
            </div>

            <div class="col-md-4">

                <!-- Search Widget -->
                <SearchWidget OnSearchClick="SearchClickHandler" />

                <OrderingWidget OnChangeOrdering="ChangeOrdering" />

            </div>

        </div>

        <div class="row justify-content-center">
            <div class="col-md-8 d-flex justify-content-center">
                <Pager PageCount="Convert.ToInt32(posts.PageCount)" Page="Convert.ToInt32(Page)" OnPagerPageChanged="PagerPageChanged"/>
            </div>
            <div class="col-md-4"></div>
        </div>
    }
</div>



@code {
    [Parameter]
    public string ThreadId { get; set; }
    public string Page { get; set; } = "1";
    public string PageSize { get; set; } = "2";
    public string SearchTerm = string.Empty;
    public string OrderBy { get; set; }

    PageResponse<PostResponse> posts;

    protected override async Task OnInitializedAsync()
    {
        await loadPosts();
    }

    protected async Task loadPosts()
    {
        posts = await PostService.loadPosts(Page, PageSize, ThreadId, SearchTerm, OrderBy);
    }

    protected async Task SearchClickHandler(string searchTerm)
    {
        SearchTerm = searchTerm;
        await PagerPageChanged(1);
    }
    protected async Task ChangeOrdering(ChangeEventArgs e)
    {
        OrderBy = e.Value.ToString();
        await PagerPageChanged(1);
    }

    protected async Task PagerPageChanged(int page)
    {
        Page = page.ToString();
        await loadPosts();
    }

}
