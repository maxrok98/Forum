@page "/post/{Id}"
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService Storage
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject Sotsera.Blazor.Toaster.IToaster Toaster

<h3>Post</h3>
@if (post == null)
{
    <Loader/>
}
else
{
    <!-- Page Content -->
    <div class="container">

        <div class="row">

            <!-- Post Content Column -->
            <div class="col-lg-10">

                <!-- Title -->
                <h1 class="mt-4">@post.Name</h1>

                <!-- Author -->
                <p class="lead">
                    by
                    <a href="#">@post.UserName</a>
                </p>

                <hr>

                <!-- Date/Time -->
                <p>Posted on @post.Date</p>

                <hr>

                <!-- Preview Image -->
                @if(post.ImageLink == null || post.ImageLink == String.Empty)
                {
                    <img class="img-fluid rounded" src="/img/post_placeholder.gif" width="920" />
                }
                else
                {
                    <img class="img-fluid rounded" src="@post.ImageLink" width="920" />
                }

                <hr>

                <!-- Post Content -->
                <p class="lead">@post.Content</p>


                <hr>

                <div class="d-flex justify-content-between align-items-center px-1">
                <div ><span class="oi oi-comment-square">: @post.Coments.Count()</span></div>
                <div ><button class="btn btn-primary" @onclick="Vote">Vote</button> Votes: @post.Rating</div>
                </div>

                <hr>

                <!-- Comments Form -->
                <div class="card my-4">
                    <h5 class="card-header">Leave a Comment:</h5>
                    <div class="card-body">
                        <EditForm Model="@coment" OnValidSubmit="CreateNewComent">
                            <DataAnnotationsValidator />

                            <div class="form-group">
                                <InputText id="name" class="form-control" rows="3" placeholder="Write comment...." @bind-Value="coment.Text" />
                                <ValidationMessage For="@(() => coment.Text)" />
                            </div>
                            <button type="submit" class="btn btn-primary">Submit</button>
                        </EditForm>
                    </div>
                </div>

                @foreach(var subComent in post.Coments.Where(p => p.ParentComentId == null))
                {
                    <Coment coment="@subComent" OnCreateComent="@CreateComentHandler"></Coment>
                }



            </div>
        </div>
    </div>
}


@code {
    [Parameter]
    public string Id { get; set; }

    PostResponse post;
    ComentRequest coment = new ComentRequest();

    protected async override Task OnInitializedAsync()
    {
        await loadPost();
    }

    async Task loadPost()
    {
        var response = await Http.GetAsync(ApiRoutes.Posts.Get.Replace("{id}", Id));
        if (response.IsSuccessStatusCode)
        {
            post = await response.Content.ReadFromJsonAsync<PostResponse>();
        }
    }
    async Task CreateNewComent()
    {
        coment.PostId = Id;
        var response = await Http.PostAsJsonAsync(ApiRoutes.Coments.Create, coment);
        await CheckIfOk(response);
    }
    async Task CreateComentHandler(ComentRequest comentreq)
    {
        comentreq.PostId = Id;
        var response = await Http.PostAsJsonAsync(ApiRoutes.Coments.Create, comentreq);
        await CheckIfOk(response);
    }
    async Task CheckIfOk(HttpResponseMessage response)
    {
        if (response.IsSuccessStatusCode)
        {
            Toaster.Success("You succesfuly comented this post!");
            await loadPost();
        }
        else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            Toaster.Warning("You have to login to leave a coment");
        }
        else
        {
            Toaster.Error("Something went wrong while commenting this post");
        }

    }
    async Task Vote()
    {
        var responce = await Http.PostAsync(ApiRoutes.Posts.Vote.Replace("{id}", Id), null);

        if (responce.IsSuccessStatusCode)
        {
            Toaster.Success(await responce.Content.ReadAsStringAsync());
            post.Rating += 1;
        }
        else if(responce.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            Toaster.Warning("You have to login to vote");
        }
        else if(responce.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            Toaster.Error(await responce.Content.ReadAsStringAsync());
        }
    }

}
