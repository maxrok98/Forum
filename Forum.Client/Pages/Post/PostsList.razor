@page "/posts/list/{Page}"
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService Storage
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper

<h3>PostsList</h3>

<div class="container">

    <div class="row">
        @if (posts == null)
        {
            <p>Loading......</p>
        }
        else
        {

                <!-- Blog Entries Column -->
            <div class="col-md-8">
                @foreach (var post in posts.Results)
                {

                    <!-- Blog Post -->
                    <div class="card mb-4">
                        <img class="card-img-top" src="data:image/jpeg;base64,@Convert.ToBase64String(post.Image)" width="750" />
                        <div class="card-body">
                            <h2 class="card-title">@post.Name</h2>
                            <p class="card-text">@post.Content</p>
                            <a href="post/@post.Id" class="btn btn-primary">Read More &rarr;</a>
                        </div>
                        <div class="card-footer text-muted">
                            Posted on @post.Date by
                            <a href="user/@post.UserId">@post.UserName</a>
                        </div>
                    </div>
                }
            </div>

            <div class="col-md-4">

                <!-- Search Widget -->
                <div class="card my-4">
                    <h5 class="card-header">Search</h5>
                    <div class="card-body">
                        <div class="input-group">
                            <input type="text" class="form-control" placeholder="Search for..." @bind="this.SearchTerm" @onkeyup="SearchBoxKeyPress">
                            <div class="input-group-btn">
                                <button name="PatientSearchButton" class="btn btn-default" @onclick="SearchClick">
                                    <i class="oi oi-magnifying-glass" title="search" aria-hidden="true"></i>
                                </button>
                            </div>
                            <div class="input-group-btn">
                                <button name="PatientSearchClear" class="btn btn-default" @onclick="ClearSearch">
                                    <i class="oi oi-x" title="clear" aria-hidden="true"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card my-4">
                    <h5 class="card-header">Order by</h5>
                    <div class="card-body">
                        <div class="card-body">
                            <div class="input-group">
                                <select id="ordering" class="form-control" value="@OrderBy" @onchange="@(async (ChangeEventArgs e) => await ChangeOrdering(e))">
                                    <option selected="selected" value="date">Date</option>
                                    <option value="rating">Rating</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

                <div class="row">
                    <div class="col-md-12">
                        <ul class="pagination pull-right">
                            @foreach (var i in Enumerable.Range(1, (int)posts.PageCount))
                            {
                                <li>
                                    @if (i == Convert.ToInt32(Page))
                                    {
                                        <button class="btn btn-dark" type="button" disabled>@i</button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-dark" type="button" @onclick="@( async () => await PagerPageChanged(i))">@i</button>
                                    }
                                </li>
                            }

                        </ul>
                    </div>
                </div>
        }
        </div>
</div>



@code {
    [Parameter]
    public string Page { get; set; } = "1";
    public string SearchTerm = string.Empty;
    public string OrderBy { get; set; }

    PageResponse<PostResponse> posts;

    protected override async Task OnInitializedAsync()
    {
        //if (Loged = await isLoggedOn())
        //{
        //var token = await Storage.GetItemAsStringAsync("JWT-Token");
        //Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        //Admin = await isAdmin();
        await loadPosts();
        //}
    }

    async Task loadPosts()
    {
        posts = await Http.GetFromJsonAsync<PageResponse<PostResponse>>(await Storage.GetItemAsStringAsync("back_uri") + ApiRoutes.Posts.GetAll + "/?PageNumber=" + Page + "&PageSize=2" + "&orderBy=" + OrderBy);
    }

    protected async Task<bool> isLoggedOn()
    {
        return !string.IsNullOrEmpty(await Storage.GetItemAsStringAsync("JWT-Token"));
    }

    protected async Task PagerPageChanged(int page)
    {
        UriHelper.NavigateTo("/posts/list/" + page);
        await loadPosts();
    }
    protected async Task SearchBoxKeyPress(KeyboardEventArgs ev)
    {
        if (ev.Key == "Enter")
        {
            await SearchClick();
        }
    }

    protected async Task SearchClick()
    {
        if (!string.IsNullOrEmpty(SearchTerm))
        {
            posts = await Http.GetFromJsonAsync<PageResponse<PostResponse>>(await Storage.GetItemAsStringAsync("back_uri") + ApiRoutes.Posts.GetAll + "/?postName=" + SearchTerm + "&orderBy=" + OrderBy);
            return;
        }
    }

    protected async Task ClearSearch()
    {
        SearchTerm = string.Empty;
        UriHelper.NavigateTo("/posts/list/" + Page);
        await loadPosts();
    }
    protected async Task ChangeOrdering(ChangeEventArgs e)
    {
        OrderBy = e.Value.ToString();
        await PagerPageChanged(1);
    }

}
