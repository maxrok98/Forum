@page "/createpost"
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService Storage
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject Sotsera.Blazor.Toaster.IToaster Toaster
@inject IJSRuntime jsRuntime
@using System.Drawing
@using BlazorLeaflet.Models
@using BlazorLeaflet.Models.Events

<div class="container-fluid">
    <div class="row">
        <div class="col-12 align-self-center">
            <div class="m-3 m-lg-5">

                <div class="text-center mt-4">
                    <h1 class="h3">Create post</h1>
                </div>

                <EditForm Model="@newPost" OnValidSubmit="CreateNewPost">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label class="form-label">Title</label>
                        <InputText id="name" class="form-control" placeholder="Name" @bind-Value="newPost.Name" />
                        <ValidationMessage For="@(() => newPost.Name)" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Content</label>
                        <InputTextArea id="content" class="form-control" placeholder="Content" @bind-Value="newPost.Content" />
                        <ValidationMessage For="@(() => newPost.Content)" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Thread</label>
                        <InputSelect id="thread" class="form-control" @bind-Value="newPost.ThreadId">
                            @foreach (var thread in threads)
                            {
                                <option value="@thread.Id">@thread.Name</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => newPost.ThreadId)" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Post type</label>
                        <InputSelect class="form-control" @bind-Value="newPost.PostType">
                            <option value="@PostType.Place" selected>Place</option>
                            <option value="@PostType.Event">Event</option>
                        </InputSelect>
                    </div>
                    <div class="mb-3 @(newPost.PostType == PostType.Event ? "" : "collapse")">
                        <label class="form-label">Post type</label>
                        <InputDateTime id="createdDate" class="form-control col-sm-8" @bind-Value="newPost.DateOfEvent"></InputDateTime>
                        <ValidationMessage class="offset-sm-3 col-sm-8" For="(()=>newPost.DateOfEvent)"></ValidationMessage>
                    </div>
                    <div class="mb-3">
                        <InputFile class="form-control" OnChange="HandleSelection" />
                    </div>
                    <!-- You must wrap the map component in a container setting its actual size. -->
                    <div id="mapContainer" style="width: 100%; height: 500px;">
                        <LeafletMap Map="_map" />
                    </div>
                    <div class="text-center mt-4">
                        <button type="submit" class="btn btn-block btn-info">Create</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@code {
    string status;
    string imageDataUri;
    byte[] base64image;

    PostRequest newPost = new PostRequest();
    List<ThreadResponse> threads = new List<ThreadResponse>();
    string selectedThreadId;

    private Map _map;
    private LatLng _markerLatLng = new LatLng(48.286507f, 25.937176f);

    protected override async Task OnInitializedAsync()
    {
        var marker = new Marker(_markerLatLng)
        {
            Draggable = true,
            Title = "Marker 1",
            Tooltip = new Tooltip { Content = "Click and drag to move me" }
        };

        _map = new Map(jsRuntime)
        {
            Center = _markerLatLng,
            Zoom = 16.0f,
            FullscreenControl = true
        };

        _map.OnInitialized += () =>
        {
            _map.AddLayer(new TileLayer
            {
                UrlTemplate = "https://a.tile.openstreetmap.org/{z}/{x}/{y}.png",
                Attribution = "&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors",
            });
            _map.AddLayer(marker);
        };

        marker.OnMove += OnDrag;
        marker.OnMoveEnd += OnDragEnd;

        var responce = await Http.GetAsync(ApiRoutes.Threads.GetAll);
        if (responce.IsSuccessStatusCode)
        {
            threads = await responce.Content.ReadFromJsonAsync<List<ThreadResponse>>();
        }
        else
        {
            Toaster.Error("Could not get thread list");
        }
    }

    private void OnDrag(Marker marker, DragEvent evt)
    {
        _markerLatLng = evt.LatLng;
        StateHasChanged();
    }

    private async void OnDragEnd(Marker marker, Event e)
    {
        marker.Position = _markerLatLng;
        Console.WriteLine("I am now at {0:0.00}° lat, {1:0.00}° lng", _markerLatLng.Lat, _markerLatLng.Lng);
        await LeafletInterops.UpdatePopupContent(jsRuntime, _map.Id, marker);
    }

    async Task CreateNewPost()
    {
        newPost.Image = base64image;
        newPost.Latitude = _markerLatLng.Lat;
        newPost.Longitude = _markerLatLng.Lng;

        var responce = await Http.PostAsJsonAsync(ApiRoutes.Posts.Create, newPost);

        if (responce.IsSuccessStatusCode)
        {
            Toaster.Success("You succesfuly created post!");
            UriHelper.NavigateTo("/userpage");
        }
        else if (responce.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            Toaster.Warning("You have to login to create a post");
        }
        else
        {
            Toaster.Error("Could not create new post!");
        }
    }

    async Task HandleSelection(IFileListEntry[] files)
    {
        var rawFile = files.FirstOrDefault();
        if (rawFile != null)
        {
            // Load as an image file in memory
            var format = "image/jpeg";
            var imageFile = await rawFile.ToImageFileAsync(format, 640, 480);
            var ms = new MemoryStream();
            await imageFile.Data.CopyToAsync(ms);

            // Make a data URL so we can display it
            base64image = ms.ToArray();
            imageDataUri = $"data:{format};base64,{Convert.ToBase64String(base64image)}";

            status = $"Finished loading {ms.Length} bytes from {imageFile.Name}";
        }
    }
}
