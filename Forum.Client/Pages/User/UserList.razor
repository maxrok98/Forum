@page "/userlist"
@inject IUserService UserService
@inject Sotsera.Blazor.Toaster.IToaster Toaster

<div class="container">
    @if(users == null)
    {
        <Loader/>
    }
    else
    {
    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th scope="col">Image</th>
                                    <th scope="col">Username</th>
                                    <th scope="col">Email</th>
                                    <th scope="col">Posts</th>
                                    <th scope="col">Sub</th>
                                    <th scope="col">Votes</th>
                                    <AuthorizeView Roles="Admin">
                                    <th scope="col">Action</th>
                                    </AuthorizeView>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach(var user in users.Results)
                                {
                                    <tr>
                                        <td>
                                            @if(user.ImageLink == null || user.ImageLink == String.Empty)
                                            {
                                            <img class="rounded_small" src="/img/user_placeholder.gif" alt="">
                                            }
                                            else
                                            {
                                            <img class="rounded_small" src="@user.ImageLink" alt="">
                                            }
                                        </td>
                                        <td><a href="user/@user.Id" class="nav-link">@user.UserName</a></td>
                                        <td>@user.Email</td>
                                        <td>@user.myPostsAmount</td>
                                        <td>@user.SubscriptionAmount</td>
                                        <td>@user.VotesAmount</td>
                                        <AuthorizeView Roles="Admin">
                                        <td><button class="btn btn-danger" @onclick="(async () => await OnDeleteUser(user.Id))">Delete</button></td>
                                        </AuthorizeView>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

        </div>
            <div class="col-md-4">

                <SearchWidget OnSearchClick="SearchClickHandler" />

            </div>

    </div>

    <div class="row justify-content-center">
        <div class="col-md-8 d-flex justify-content-center">
            <Pager PageCount="@Convert.ToInt32(users.PageCount)" Page="@Convert.ToInt32(Page)" OnPagerPageChanged="PagerPageChanged"/>
        </div>
        <div class="col-md-4"></div>
    </div>
        
    }


</div>



@code {
    public string Page { get; set; } = "1";
    public string PageSize { get; set; } = "2";
    public string SearchTerm { get; set; } = string.Empty;

    PageResponse<UserShortResponse> users;

    protected override async Task OnInitializedAsync()
    {
        await loadUsers();
    }

    protected async Task loadUsers()
    {
        users = await UserService.GetAll(Page, PageSize, SearchTerm);
    }
    protected async Task OnDeleteUser(string id)
    {
        var result = await UserService.DeleteAsync(id);
        if (result)
        {
            Toaster.Info("Account seccessfully deleted!");
            await loadUsers();
        }
        else
        {
            Toaster.Warning("Could not delete account!");
        }

    }

    protected async Task SearchClickHandler(string searchTerm)
    {
        SearchTerm = searchTerm;
        await PagerPageChanged(1);
    }

    protected async Task PagerPageChanged(int page)
    {
        Page = page.ToString();
        await loadUsers();
    }

}
