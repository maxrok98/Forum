@page "/userpage"

@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService Storage
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper

<h3>UserPage</h3>
@if (!Loged)
{
    <p>You have to login to see your page!</p>
}
else
{
    <p>Email: @user.Email</p>
    <p>Usermane: @user.UserName</p>
    <img src="@imageDataUri" />

    <h1>Your posts</h1>
    <table class="table">
        <thead>
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var post in user.myPosts)
            {
            <tr>
                <th><a href="post/@post.Id" class="nav-link" >@post.Name</a></th>
                <th><button class="btn btn-danger" @onclick="@(async () => await DeletePostAsync(post.Id))">Delete</button></th>
            </tr>
            }
        </tbody>
    </table>

}

@code {
    public bool Loged;
    UserResponse user;
    string imageDataUri;

    protected override async Task OnInitializedAsync()
    {
        if (await isLoggedOn())
        {
            await LoadUserInfo();
        }
    }

    protected async Task<bool> isLoggedOn()
    {
        return Loged = !string.IsNullOrEmpty(await Storage.GetItemAsStringAsync("JWT-Token"));
    }

    protected async Task LoadUserInfo()
    {
        JwtSecurityTokenHandler jwt = new JwtSecurityTokenHandler();
        var token = await Storage.GetItemAsStringAsync("JWT-Token");
        var tokenDecoded = jwt.ReadJwtToken(token) as JwtSecurityToken;

        var id = tokenDecoded.Claims.Where(x => x.Type == "id").FirstOrDefault().Value;

        Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        var responce = await Http.GetAsync(await Storage.GetItemAsStringAsync("back_uri") + ApiRoutes.User.Get + id);

        var format = "image/jpeg";
        if (responce.IsSuccessStatusCode)
        {
            user = await responce.Content.ReadFromJsonAsync<UserResponse>();
            imageDataUri = $"data:{format};base64,{Convert.ToBase64String(user.Image)}";

        }
    }

    protected async Task DeletePostAsync(string postId)
    {
        var responce = await Http.DeleteAsync(await Storage.GetItemAsStringAsync("back_uri") + ApiRoutes.Posts.Delete.Replace("{id}", postId));
        if (responce.IsSuccessStatusCode)
        {
            user.myPosts.RemoveAll(x => x.Id == postId);
        }
    }

}
