@page "/userpage"

@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService Storage
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject Sotsera.Blazor.Toaster.IToaster Toaster
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Microsoft.AspNetCore.Authorization.Authorize]


@if (user == null)
{
    <Loader />
}
else
{
    <div class="profile d-flex mb-5 mt-5 p-2 shadow rounded">
        <div class="">
            <img class="rounded_medium" src="@imageDataUri" alt="Avatar">
        </div>
        <div class="profile_data ml-5">
            <p>Email: @user.Email</p>
            <p>Usermane: @user.UserName</p>
        </div>
    </div>


    <TabControl>
        <TabPage Text="Posts">
            <table class="table shadow">
                <thead>
                    <tr>
                        <th scope="col">Name</th>
                        <th scope="col">Coments</th>
                        <th scope="col">Votes</th>
                        <th scope="col">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var post in user.myPosts)
                    {
                        <tr>
                            <th><a href="post/@post.Id" class="nav-link">@post.Name</a></th>
                            <th>@post.ComentsAmount</th>
                            <th>@post.VotesAmount</th>
                            <th><button class="btn btn-danger" @onclick="@(async () => await DeletePostAsync(post.Id))">Delete</button></th>
                        </tr>
                    }
                </tbody>
            </table>
        </TabPage>
        <TabPage Text="Subscriptions">
            <table class="table shadow">
                <thead>
                    <tr>
                        <th scope="col">Name</th>
                        <th scope="col">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var thread in user.Subscription)
                    {
                        <tr>
                            <th><a href="thread/@thread.Id/list/1" class="nav-link">@thread.Name</a></th>
                            <th><button class="btn btn-danger" @onclick="@(async () => await DeleteSubscriptionAsync(thread.Id))">Unsibscribe</button></th>
                        </tr>
                    }
                </tbody>
            </table>
        </TabPage>
        <TabPage Text="Votes">
            <table class="table shadow">
                <thead>
                    <tr>
                        <th scope="col">Name</th>
                        <th scope="col">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var post in user.Votes)
                    {
                        <tr>
                            <th><a href="post/@post.Id" class="nav-link">@post.Name</a></th>
                            <th><button class="btn btn-danger" @onclick="@(async () => await DownvotePostAsync(post.Id))">Downvote</button></th>
                        </tr>
                    }
                </tbody>
            </table>
        </TabPage>
    </TabControl>



    @*<nav>
        <div class="nav nav-tabs" id="nav-tab" role="tablist">
            <a class="nav-item nav-link active" id="nav-posts-tab" data-toggle="tab" role="tab" aria-controls="nav-posts" aria-selected="true">Posts</a>
            <a class="nav-item nav-link" id="nav-subscriptions-tab" data-toggle="tab" role="tab" aria-controls="nav-subscriptions" aria-selected="false">Supscriptions</a>
            <a class="nav-item nav-link" id="nav-votes-tab" data-toggle="tab" role="tab" aria-controls="nav-votes" aria-selected="false">Votes</a>
        </div>
    </nav>
    <div class="tab-content" id="nav-tabContent">
        <div class="tab-pane fade show active" id="nav-posts" role="tabpanel" aria-labelledby="nav-posts-tab">
            <table class="table shadow">
                <thead>
                    <tr>
                        <th scope="col">Name</th>
                        <th scope="col">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var post in user.myPosts)
                    {
                        <tr>
                            <th><a href="post/@post.Id" class="nav-link">@post.Name</a></th>
                            <th><button class="btn btn-danger" @onclick="@(async () => await DeletePostAsync(post.Id))">Delete</button></th>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="tab-pane fade" id="nav-subscriptions" role="tabpanel" aria-labelledby="nav-subscriptions-tab">
        <table class="table shadow">
            <thead>
                <tr>
                    <th scope="col">Name</th>
                    <th scope="col">Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var thread in user.Subscription)
                {
                    <tr>
                        <th><a href="thread/@thread.Id/list/1" class="nav-link">@thread.Name</a></th>
                        <th><button class="btn btn-danger" @onclick="@(async () => await DeleteSubscriptionAsync(thread.Id))">Unsibscribe</button></th>
                    </tr>
                }
            </tbody>
        </table>
        </div>
        <div class="tab-pane fade" id="nav-votes" role="tabpanel" aria-labelledby="nav-votes-tab">
            <table class="table shadow">
                <thead>
                    <tr>
                        <th scope="col">Name</th>
                        <th scope="col">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var post in user.Votes)
                    {
                        <tr>
                            <th><a href="post/@post.Id" class="nav-link">@post.Name</a></th>
                            <th><button class="btn btn-danger" @onclick="@(async () => await DownvotePostAsync(post.Id))">Downvote</button></th>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>*@

}

@code {
    UserResponse user { get; set; }
    string imageDataUri;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            var _authMessage = $"{user.Identity.Name} is authenticated.";
            var _claims = user.Claims;
            var id = user.FindFirst(c => c.Type == "id")?.Value;

            await LoadUserInfo(id);
        }
        else
        {
            //_authMessage = "The user is NOT authenticated.";
        }
    }


    protected async Task LoadUserInfo(string id)
    {
        //JwtSecurityTokenHandler jwt = new JwtSecurityTokenHandler();
        //var token = await Storage.GetItemAsStringAsync("JWT-Token");
        //var tokenDecoded = jwt.ReadJwtToken(token) as JwtSecurityToken;

        //var id2 = tokenDecoded.Claims.Where(x => x.Type == "id").FirstOrDefault().Value;

        var responce = await Http.GetAsync(ApiRoutes.User.Get.Replace("{id}", id));

        var format = "image/jpeg";
        if (responce.IsSuccessStatusCode)
        {
            user = await responce.Content.ReadFromJsonAsync<UserResponse>();
            imageDataUri = $"data:{format};base64,{Convert.ToBase64String(user.Image)}";

        }
    }

    protected async Task DeletePostAsync(string postId)
    {
        var responce = await Http.DeleteAsync(ApiRoutes.Posts.Delete.Replace("{id}", postId));
        if (responce.IsSuccessStatusCode)
        {
            user.myPosts.RemoveAll(x => x.Id == postId);
            Toaster.Error("Post is deleted!");
        }
    }

    protected async Task DeleteSubscriptionAsync(string threadId)
    {
        var responce = await Http.DeleteAsync(ApiRoutes.Threads.Unsubscribe.Replace("{id}", threadId));
        if (responce.IsSuccessStatusCode)
        {
            user.Subscription.RemoveAll(x => x.Id == threadId);
            Toaster.Error("Thread is deleted!");
        }

    }

    protected async Task DownvotePostAsync(string postId)
    {
        var responce = await Http.DeleteAsync(ApiRoutes.Posts.Unvote.Replace("{id}", postId));
        if (responce.IsSuccessStatusCode)
        {
            user.Votes.RemoveAll(x => x.Id == postId);
            Toaster.Error("Unvoted post");
        }
    }

}
