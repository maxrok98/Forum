@page "/threadpage"
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService Storage
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject Sotsera.Blazor.Toaster.IToaster Toaster



<div class="container">

    <h3>ThreadPage</h3>

    @if (tresponces == null)
    {
        <p>Loading.......</p>
    }
    else
    {

        @foreach (var thread in tresponces)
        {
            <div class="position-relative d-flex mb-4 p-4 shadow bg-light thread-table_row-hover">

                <div class="d-flex justify-content-center align-items-center thread-table_row-img">
                    <img src="data:image/jpeg;base64,@Convert.ToBase64String(thread.Image)" height="150" width="150" class="shadow-lg" />
                </div>

                <div class="d-flex flex-column justify-content-between pl-4 thread-table_row_text">
                    <div>
                        <div><h2><a class="text-decoration-none thread-table_row_text_heading" href="/thread/@thread.Id/list/1">@thread.Name</a></h2></div>
                        <div class="text-secondary">@thread.Description</div>
                    </div>
                    <div class="d-flex thread-table_row_icons">
                        <i> <span class="oi oi-list-rich"></span> :21 </i>
                        <i> <span class="oi oi-people"></span> :@thread.NumberOfSubscription </i>
                    </div>
                </div>

                @if (Admin)
                {
                    <button class="btn btn-danger position-absolute thread-table_row_admin-btn" @onclick="@(async () => await DeleteThreadAsync(thread.Id))">Delete</button>
                }
            </div>
        }

        @if (Admin)
        {
            <EditForm Model="@newThread" OnValidSubmit="CreateNewThread">
                <DataAnnotationsValidator />

                <div>
                    <h1 class="h3 mb-3 text-center">Create new thread</h1>
                    <div class="form-group">
                        <InputText id="name" class="form-control" placeholder="Name" @bind-Value="newThread.Name" />
                        <ValidationMessage For="@(() => newThread.Name)" />
                    </div>
                    <div class="form-group">
                        <InputText id="username" class="form-control" placeholder="Description" @bind-Value="newThread.Description" />
                        <ValidationMessage For="@(() => newThread.Description)" />
                    </div>

                    <InputFile OnChange="HandleSelection" />
                    <p>@status</p>
                    @if (!string.IsNullOrEmpty(imageDataUri))
                    {
                        <img src="@imageDataUri" />
                    }

                    <div class="form-group mt-2">
                        <button type="submit" class="btn btn-lg btn-primary btn-block">Create</button>
                    </div>
                </div>
            </EditForm>
        }
    }
</div>


@code {
    //bool Loged = false;
    bool Admin = false;
    List<ThreadResponse> tresponces = new List<ThreadResponse>();

    ThreadRequest newThread = new ThreadRequest();
    string status;
    string imageDataUri;
    byte[] base64image;

    protected override async Task OnInitializedAsync()
    {
        await loadThreads();
        if(await isLoggedOn())
            Admin = await isAdmin();
    }

    protected async Task<bool> isLoggedOn()
    {
        return !string.IsNullOrEmpty(await Storage.GetItemAsStringAsync("JWT-Token"));
    }

    protected async Task<bool> isAdmin()
    {
        JwtSecurityTokenHandler jwt = new JwtSecurityTokenHandler();
        var token = await Storage.GetItemAsStringAsync("JWT-Token");
        var tokenDecoded = jwt.ReadJwtToken(token) as JwtSecurityToken;

        var role = tokenDecoded.Claims.Where(x => x.Type == "role").FirstOrDefault().Value;

        return role == "Admin";
    }
    protected async Task loadThreads()
    {
        var token = await Storage.GetItemAsStringAsync("JWT-Token");
        Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        var responce = await Http.GetAsync(await Storage.GetItemAsStringAsync("back_uri") + ApiRoutes.Threads.GetAll);

        if (responce.IsSuccessStatusCode)
        {
            tresponces = await responce.Content.ReadFromJsonAsync<List<ThreadResponse>>();

        }
        else
        {
            Console.WriteLine(responce.Content);
        }
    }

    async Task HandleSelection(IFileListEntry[] files)
    {
        var rawFile = files.FirstOrDefault();
        if (rawFile != null)
        {
            // Load as an image file in memory
            var format = "image/jpeg";
            var imageFile = await rawFile.ToImageFileAsync(format, 640, 480);
            var ms = new MemoryStream();
            await imageFile.Data.CopyToAsync(ms);

            // Make a data URL so we can display it
            base64image = ms.ToArray();
            imageDataUri = $"data:{format};base64,{Convert.ToBase64String(base64image)}";

            status = $"Finished loading {ms.Length} bytes from {imageFile.Name}";
        }
    }

    async Task CreateNewThread()
    {
        newThread.Image = base64image;
        var response = await Http.PostAsJsonAsync(await Storage.GetItemAsStringAsync("back_uri") + ApiRoutes.Threads.Create, newThread);
        if (response.IsSuccessStatusCode)
        {
            Toaster.Info("New thread is created!");
            UriHelper.NavigateTo("/threadpage");
        }
        else
        {
            Toaster.Error("Something went wrong when creating new thread!");
        }
    }
    private async Task DeleteThreadAsync(string id)
    {
        var response = await Http.DeleteAsync(await Storage.GetItemAsStringAsync("back_uri") + ApiRoutes.Threads.Delete.Replace("{id}", id)) ;
        if (response.IsSuccessStatusCode)
        {
            tresponces.RemoveAll(x => x.Id == id);
            Toaster.Warning("Thread is deleted!");
        }
        else
        {
            Toaster.Error("Could not delete thread!");
        }
    }
}
