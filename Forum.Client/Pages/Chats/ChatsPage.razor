@page "/chats"
@inject HttpClient Http
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@inject Sotsera.Blazor.Toaster.IToaster Toaster

@implements IDisposable

<div class="container py-5 px-4">

    <CreateChatModal OnCreateChat="CreateChat"/>


    <div class="row rounded-lg overflow-hidden shadow">
        <!-- Users box-->
        <div class="col-5 px-0">
            <div class="bg-white">

                <div class="bg-gray px-4 py-2 bg-light">
                    <p class="h5 mb-0 py-1">Recent</p>
                </div>

                <div class="messages-box">
                    <div class="list-group rounded-0">
                        @foreach (var chat in chats)
                        {
                            if (!choosedChat.ContainsKey(chat.Id)) choosedChat.Add(chat.Id, false);
                            <a @onclick="@(async () => await ChatClick(chat))" class="list-group-item list-group-item-action @(choosedChat[chat.Id] ? "active text-white" : "list-group-item-light" ) rounded-0">
                                <div class="media">
                                    <div class="avatars">
                                        @foreach (var user in chat.Users)
                                        {
                                            <span class="avatar">
                                                <img src=@(string.IsNullOrEmpty(user.ImageLink) ? "img/user_placeholder.png" : user.ImageLink ) />
                                            </span>
                                        }
                                    </div>
                                    <div class="media-body ml-4">
                                        <div class="d-flex align-items-center justify-content-between mb-1">
                                            <h6 class="mb-0">@chat.Name</h6>
                                            @if (chat.LastMessage != null)
                                            {<small class="small font-weight-bold">@chat.LastMessage.Date.ToString()</small>}
                                        </div>
                                        @if (chat.LastMessage != null)
                                        {<p><b><a class="text-dark" href="user/@chat.LastMessage.User.Id">@chat.LastMessage.User.UserName</a></b></p>
                                        <p class="font-italic mb-0 text-small">@chat.LastMessage.Text</p>}
                                    </div>
                                </div>
                            </a>
                        }
                    </div>
                    <div style="position: absolute; bottom: 30px; right: 30px; z-index: 10;" >
                        <button class="btn btn-info btn-rounded btn-icon"  data-target="#createChatModal" data-toggle="modal"><i class="mdi mdi-plus"></i></button>
                    </div>
                </div>
            </div>
        </div>
        <!-- Chat Box-->
        <div class="col-7 px-0">
            @if (!string.IsNullOrEmpty(choosedChatId))
            {
                <Chat @ref="@chat" chatId="@choosedChatId"></Chat>
            }

        </div>
    </div>
</div>



@code {

    string choosedChatId { get; set; }
    Dictionary<string, bool> choosedChat { get; set; } = new Dictionary<string, bool>();
    List<ChatShortResponse> chats = new List<ChatShortResponse>();

    Chat chat;
    protected override async Task OnInitializedAsync()
    {
        await loadChats();
    }

    private async Task loadChats()
    {
        var responce = await Http.GetAsync(ApiRoutes.Chats.GetMy);
        if (responce.IsSuccessStatusCode)
        {
            chats = await responce.Content.ReadFromJsonAsync<List<ChatShortResponse>>();
        }
        else
        {
            Toaster.Error("Could not get chat list");
        }
    }

    protected async Task CreateChat(ChatRequest chat)
    {
        var responce = await Http.PostAsJsonAsync(ApiRoutes.Chats.Create, chat);
        if (responce.IsSuccessStatusCode)
        {
            Toaster.Info("Chat created successfuly!");
        }
        else
        {
            Toaster.Error("Could not create chat!");
        }
        await loadChats();
    }

    protected async Task ChatClick(ChatShortResponse chat)
    {
        if (!choosedChat[chat.Id])
        {
            foreach (var ch in chats) choosedChat[ch.Id] = false;
            choosedChat[chat.Id] = true;
            choosedChatId = chat.Id;
            if (this.chat != null)
                await this.chat.DisposeAsync();
            this.chat = new Chat();
        }
    }

    public void Dispose()
    {
        if (this.chat != null)
            this.chat.DisposeAsync();
    }

}
